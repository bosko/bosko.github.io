<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Pragmatic Development Notes]]></title>
  <link href="http://pragdevnotes.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://pragdevnotes.com/"/>
  <updated>2013-10-14T09:17:08+02:00</updated>
  <id>http://pragdevnotes.com/</id>
  <author>
    <name><![CDATA[Boško Ivanišević]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby 1.9.2 on Windows - coming soon]]></title>
    <link href="http://pragdevnotes.com/2010/08/19/ruby-1-9-2-on-windows-coming-soon/"/>
    <updated>2010-08-19T22:33:00+02:00</updated>
    <id>http://pragdevnotes.com/2010/08/19/ruby-1-9-2-on-windows-coming-soon</id>
    <content type="html"><![CDATA[<p>I guess all Ruby and Windows users will be happy to hear that <a href="http://rubyinstaller.org/">RubyInstaller</a> team is about to release Ruby 1.9.2p0 very soon. See details in <a href="http://groups.google.com/group/rubyinstaller/browse_thread/thread/a9b1149f9ee77a72">this thread</a>. It will take some time to update documentation so be patient and keep an eye on the project home page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Splitting Ruby Array]]></title>
    <link href="http://pragdevnotes.com/2009/06/04/splitting-ruby-array/"/>
    <updated>2009-06-04T19:00:00+02:00</updated>
    <id>http://pragdevnotes.com/2009/06/04/splitting-ruby-array</id>
    <content type="html"><![CDATA[<p>Recently I had to process arrays of data with more than thousand of members but requirement was not to process them one by one. Instead I had to split array into chunks and to process each of sub-arrays separately. I&rsquo;ve found one definition of chunk method within comments on this <a href="http://snippets.dzone.com/posts/show/3486">post</a> and I&rsquo;m including it here. This method splits array in given number of sub-arrays and I needed a version that will split array in the sub-arrays that have predefined size (ok, I know I could simply calculate a number of chunks by dividing total number of elements by required number of elements, but I just wanted one method that&rsquo;ll do all that for me). So I wrote chunk_max_num method. If maximum number of elements per array is zero or negative it will return original array and for all other cases it will return array which has arrays of given size as members.</p>

<p>```ruby
require &lsquo;enumerator&rsquo;</p>

<p>class Array
  def chunk_max_num(max_num)</p>

<pre><code>return slice(0...length) unless max_num &gt; 0
quot, mod = length.divmod(max_num)
quot += 1 if mod &gt; 0
(0..quot).map {|i| i*max_num}.enum_cons(2).map {|a,b| slice(a...b)}
</code></pre>

<p>  end</p>

<p>  def chunk(pieces)</p>

<pre><code>q,r = length.divmod(pieces)
(0..pieces).map {|i| i * q + [r,i].min}.enum_cons(2).map {|a,b| slice(a...b)}
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
</feed>
