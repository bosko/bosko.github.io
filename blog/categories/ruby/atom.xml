<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby, | Pragmatic Development Notes]]></title>
  <link href="http://bosko.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://bosko.github.io/"/>
  <updated>2013-08-07T17:56:27+02:00</updated>
  <id>http://bosko.github.io/</id>
  <author>
    <name><![CDATA[Boško Ivanišević]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make Ruby Tests Greener]]></title>
    <link href="http://bosko.github.io/blog/2012/06/27/make-ruby-tests-greener/"/>
    <updated>2012-06-27T01:42:00+02:00</updated>
    <id>http://bosko.github.io/blog/2012/06/27/make-ruby-tests-greener</id>
    <content type="html"><![CDATA[<p><a href="https://groups.google.com/forum/?fromgroups#!topic/rubyinstaller/A92K_EYJX2A">The Ruby Greener Test Challenge</a> is here. It is attempt to make Ruby on Windows better and more stable and direct goal of this challenge is to fix all tests and to reach 0F0E (0 failures, 0 errors) state. If you are Ruby developer on Windows you should consider taking a role in the challenge.</p>

<p>If you decide to try to fix some failing tests or existing errors it is easy to set up complete environment with the help of <a href="http://cdn.rubyinstaller.org/archives/experimental/RubyChallengePack-v1.exe">Ruby Challenge Pack</a>. I will not write about details here since you have all you need in the initial challenge post given in the link on top of the article. Instead I will give you few suggestions about participating in the challenge.</p>

<p>You should be aware of three things when you run tests:</p>

<ol>
<li><strong>Set up console code page to 1252 or 65001.</strong> Some tests may fail due to the console code page, so before running tests you should execute <code>chcp 1252</code> or <code>chcp 65001</code>.</li>
<li><strong>Option -j2 may lead to errors.</strong> In case you want to run tests faster you can use <code>make test-al TESTS="-qv -j2"</code> but be aware that this can also lead to fals failures or errors.</li>
<li><strong>Anti-virus software.</strong> If you see <code>Errno::EACCES: Permission denied</code> error in test, most likely the cause is anti-virus which locked the file during tests.</li>
</ol>


<p>With these things on your mind you can proceed to fixing. Here is simple workflow you can use. The very first thing you should do is to clone Ruby source from GitHub:</p>

<p><code>sh
git clone git://github.com/ruby/ruby.git
</code></p>

<p>After deciding what you want to fix you should make new local branch in which you work:</p>

<p><code>sh
git checkout -b fix-win32ole-fso-encoding-misuse
</code></p>

<p>After you find a source of failures or errors you will make fixes and commit changes to your local branch. I would suggest making small commits. If commits contain too many changes, patches are harder to apply and are more likely to cause conflicts. Finally after finishing all fixes you just have to make a patch (es).</p>

<p><code>sh
git checkout -b fix-win32ole-fso-encoding-misuse
</code></p>

<p>Adjust last number in above command to the number of commits you made on your local branch. This will create one or more patch files (one file per commit). In the case of <a href="https://bugs.ruby-lang.org/issues/6650">already submitted fix</a> single file was created: <code>0001-FileSystemObject-does-not-support-UTF-8.patch</code>. At the end open a ticket, write small description, attach your patch file (s) and assign ticket to Luis Lavena.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exefy ‘Em All]]></title>
    <link href="http://bosko.github.io/blog/2012/06/25/exefy-em-all/"/>
    <updated>2012-06-25T01:51:00+02:00</updated>
    <id>http://bosko.github.io/blog/2012/06/25/exefy-em-all</id>
    <content type="html"><![CDATA[<p>Recently Luis Lavena started thread <a href="https://groups.google.com/d/topic/rubyinstaller/fQCuPfiuuRc/discussion">Idea: executable stubs to replace batch files</a> on RubyInstaller mailing list. In short, the idea is to use command line applications &ndash; executable stubs &ndash; instead of batch files in RubyInstaller Ruby versions. Using command line applications instead of batch files has several benefits. First one, maybe not so important, is to avoid annoying</p>

<p>Terminate batch job (Y/N)?</p>

<p>question when execution is interrupted with Ctrl-C key combination. The second is to get meaningful list of processes in the system. With batch files we can only see bunch of ruby.exe processes in the list. This gives us possibility to define firewall rules for these applications which will not be applied globally for all Ruby scripts. Finally, installing Ruby applications as services, with the help of some service wrapper, is usually easier if we use executable file. These are reasons why new <a href="http://github.com/bosko/gem-exefy">gem-exefy</a> gem was made.</p>

<h3>Gem-exefy Internals</h3>

<p>Gem-exefy mimics behavior of batch files installed by RubyGems and to see how it works we must know how existing batch files work. First step is to install gem that has executable value defined in gem specification. Example of such gem is Bundler. After installing it on Windows, RubyGems will create bundle.bat file in <code>&lt;path_to_ruby_installation&gt;/bin</code> folder. Content of that file is:</p>

<p><code>bat
@ECHO OFF
IF NOT "%~f0" == "~f0" GOTO :WinNT
@"ruby.exe" "c:/path/to/ruby/installation/bin/bundle" %1 %2 %3 %4 %5 %6 %7 %8 %9
GOTO :EOF
:WinNT
@"ruby.exe" "%~dpn0" %*
</code></p>

<p>Without digging too much into all details we can see that batch file starts ruby.exe passing it full path to Ruby script (bundle, in this case) using all arguments passed to batch file as arguments of Ruby script. So all we have to do is to make application which will be able to execute Ruby script and will accept arguments passed in the command line. Sounds familiar, isn’t it? Exactly! We already have ruby.exe and in Ruby code we can find almost everything we need. Here is a slightly simplified version of Ruby’s main.c file:</p>

<p>```c</p>

<h1>include &ldquo;ruby.h&rdquo;</h1>

<h1>ifdef HAVE_LOCALE_H</h1>

<h1>include &lt;locale.h></h1>

<h1>endif</h1>

<p>int
main(int argc, char **argv)
{</p>

<h1>ifdef HAVE_LOCALE_H</h1>

<p>  setlocale(LC_CTYPE, &ldquo;&rdquo;);</p>

<h1>endif</h1>

<p>  ruby_sysinit(&amp;argc, &amp;argv);
  {</p>

<pre><code>RUBY_INIT_STACK;
ruby_init();
return ruby_run_node(ruby_options(argc, argv));
</code></pre>

<p>  }
}
```</p>

<p>If we build application from this source we will get the same application as ruby.exe. This means if we want to execute some Ruby script we will have to pass path to it as a first argument with optional arguments following it. But our goal is not to invoke application with the path to Ruby script. Instead we want to invoke predefined script. In order to achieve that, we obviously have to alter the list of arguments (argv) and to insert path to target Ruby script. But there is a catch (I spent almost whole day to figure it out). We must change the list of arguments after the call</p>

<p><code>c
ruby_sysinit(&amp;argc, &amp;argv);
</code></p>

<p>Ruby performs system dependent arguments initialization in the above method and the list of arguments will be reverted back if we change it before this initialization. Of course there are some additional details that we must take care of, but you can figure them out directly from &ldquo;the source&rdquo;:<a href="https://github.com/bosko/gem-exefy/blob/master/templates/gem_exe.c.">https://github.com/bosko/gem-exefy/blob/master/templates/gem_exe.c.</a> After we change the list of arguments, Ruby will execute script we passed it and that’s all the magic gem-exefy does.</p>

<h3>Let’s Exefy</h3>

<p>We are now ready to exefy existing and new gems on our RubyInstaller version. gem-exefy is made as RubyGems plugin. After installing it with:</p>

<p><code>sh
gem install gem-exefy
</code></p>

<p>new gem command will be available &ndash; exefy. This command is used for replacing batch files for single or all installed gems. Replacing batch files with executable stubs for single gem is performed by passing name of the targeted gem to the exefy command.</p>

<p><code>sh
gem exefy bundler
</code></p>

<p>Exefying all installed gems is simple &ndash; just pass <code>--all</code> to <code>exefy</code> command</p>

<p><code>sh
gem exefy --all
</code></p>

<p>If you are not satisfied and still want to use batch files &ndash; don’t worry. You can always revert old batch files for single or all gems with <code>--revert</code> argument</p>

<p><code>sh
gem exefy bundler --revert
gem exefy --all --revert
</code></p>

<p>After gem-exefy is installed it will, by default, install executable stubs instead of batch files for all gems installed after it.</p>

<p>It is important to mention that gem-exefy will not replace batch files for commands installed with RubyInstaller (irb, rake&hellip;) and are part of Ruby core. Will support for converting these batch files be implemented is yet to be seen.</p>

<h3>Acknowledgements</h3>

<p>I want to thanks <a href="https://github.com/luislavena">@luislavena</a>,<a href="https://github.com/azolo">@azolo</a> and <a href="https://github.com/jonforums">@jonforums</a> for helping me out making gem-exefy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Windows Guides - The Book]]></title>
    <link href="http://bosko.github.io/blog/2012/03/07/ruby-on-windows-guides-the-book/"/>
    <updated>2012-03-07T20:02:00+01:00</updated>
    <id>http://bosko.github.io/blog/2012/03/07/ruby-on-windows-guides-the-book</id>
    <content type="html"><![CDATA[<p>I use Windows on my everyday work. First thing I do after installing Windows is to set up complete environment for Ruby. In “ancient” days (measuring in computer years, of course) I have used One Click Installer. Later, <a href="http://www.rubyinstaller.org">RubyInstaller</a> came on the scene.</p>

<p>With much better foundations, RubyInstaller simplified Ruby usage and made it look like on Linux, Ruby’s native platform. Key benefit of RubyInstaller over One Click installer was possibility to install Ruby native gems written in C. Switching from commercial VisualStudio, used in One Click Installer, to MinGW build tool-chain in RubyInstaller was crucial decision made by Luis Lavena, great author of RubyInstaller.</p>

<p>After RubyInstaller, one more project appeared with the goal to simplify Ruby on Rails installation and usage on Windows. RailsInstaller. I haven’t tried it, but I’m sure it will help increasing number of Rails users on Windows.</p>

<p>But do you really need installer for Ruby on Rails on Windows? It depends of your attitude. If you are not interested what is going on behind the scenes and just want to be able to start using Rails after few mouse clicks RailsInstaller is definitely for you.</p>

<p>If, on the other hand, you want to know how things work, you should try to install Ruby on Rails without installer. With RubyInstaller installing Ruby on Rails on Windows is, actually, just a matter of issuing</p>

<p><code>sh
gem install rails
gem install sqlite3
</code></p>

<p>Of course you might face problems building and installing some gems, primarily because gem authors don’t want to bother with Windows support or simply because gems rely of third party libraries that are not ported to Windows. In any case you can ask for help on <a href="http://groups.google.com/group/rubyinstaller">RubyInstaller mailing list</a>.</p>

<p>People wonder if Ruby and Ruby on Rails are really usable on Windows. My opinion is that they are. Of course, there are some problems mainly with speed, but I would dare to say that solutions are on the way and hopefully very soon this will not be problem any more. I guess main reason why they are not so widespread on Windows platforms is scepticism and lack of experience.</p>

<p>As one of contributors to RubyInstaller project I noticed same questions are repeated on RubyInstaller mailing list. Mainly because of lack of familiarity with Ruby and RoR on Windows. That’s why I decided to write <a href="http://rubyonwindowsguides.github.com">a book</a> where I tried to give deeper insight on all details about installing and using Ruby and Ruby on Rails on Windows. The <a href="http://rubyonwindowsguides.github.io">Ruby on Windows Guides</a> is still in beta. However it already covers the most important issues and I think all novices and advanced developers can learn something new from it. Work on the book is still in progress so if you have any suggestions, ideas and wishes you can send them as an <a href="https://github.com/rubyonwindowsguides/rubyonwindowsguides.github.com/issues">issue on the GitHub</a>.</p>

<p>If you want to get deeper understanding of Ruby and Ruby on Rails on Windows, find out how to build native gems in several ways or just want to get an idea for what you can use Ruby on Windows go ahead and read the book. Of course I expect your comments, here or on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dep_walker Gem]]></title>
    <link href="http://bosko.github.io/blog/2011/05/07/dep-walker-gem/"/>
    <updated>2011-05-07T06:40:00+02:00</updated>
    <id>http://bosko.github.io/blog/2011/05/07/dep-walker-gem</id>
    <content type="html"><![CDATA[<p>Common problem that Ruby developers face on Windows is missing dll message box that appears when they try to use gem that has extension library. Usually these Gems are packed with pre-built binary\ extensions for windows and, even though, installation passes without any error or warning, when they try to use them they realize that dll these Gems depend on are missing on the system.</p>

<p>Maybe most common Gem for which this happens is sqlite3, Ruby binding for the SQlite3 embedded database. If sqlite3.dll is missing from the system, after installation of sqlite3 Gem any attempt to use it causes following message box to appear.</p>

<p><img src="/images/dep_walker/missing_dll_msg_box.png" title="Missing DLL message box." ></p>

<p>If two versions of a required dll exist on the system Gem might use the wrong one and strange crashes can appear.</p>

<p>These errors are not limited to the Gems that have pre-built binary extensions but can also happen if extension library was built with the <a href="http://www.rubyinstaller.org">RubyInstaller’s</a> <a href="http://www.rubyinstaller.org/add-ons/devkit">DevKit</a>. If development files (header and library files) needed for the extension library to be built exist on the system while target dll is missing gem usage\ will cause the same message box to appear.</p>

<p>Frequently novice Ruby users on Windows ask question on mailing lists why Gem is not working even if it was installed without any error. That’s why I made dep_walker, small utility Gem, that can be used to check whether all dependencies for extension libraries used by installed Gem (s) are met or not. Source of the Gem can be found on <a href="http://github.com/bosko/dep_walker">GitHub</a>.</p>

<p>Usage is very simple. If you want to check all installed Gems just invoke dep_walker with the ’-a’ switch.</p>

<p><code>sh
dep_walker -a
</code></p>

<p>And for particular gem swith <code>-c</code> can be used.</p>

<p><code>sh
dep_walker -c sqlite3
</code></p>

<p>More verbose output is obtained via <code>-t</code> and colour with <code>--color</code> swith. Happy dependencies walking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Selenium with Cucumber through Webrat or Capybara. Which one to choose?]]></title>
    <link href="http://bosko.github.io/blog/2010/10/31/using-selenium-with-cucumber-through-webrat-or-capybara-which-one-to-choose/"/>
    <updated>2010-10-31T13:55:00+01:00</updated>
    <id>http://bosko.github.io/blog/2010/10/31/using-selenium-with-cucumber-through-webrat-or-capybara-which-one-to-choose</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Testing is (or should be) important part of every software development. Over time various testing strategies and supporting tools and frameworks have been developed. Regarding Web development biggest advance has been made in Behavior Driven Development. Consequently many tools for BDD are published and used.</p>

<p><a href="http://www.rubyonrails.org">Ruby on Rails</a> framework had great built-in support for testing from the very beginning. As it usually happens, lot of specialised testing tools appeared aside of it and among all of them my favourites are <a href="http://rspec.info">RSpec</a> and <a href="http://github.com/aslakhellesoy/cucumber/wiki">Cucumber</a>. The first one for unit and the second for functional tests. Both of them are well integrated with Ruby on Rails and are very easy to set up and start with. Moreover there is no need to use real browsers which results in fast tests execution. Perfect way for BDD.</p>

<p>But what if you have to perform functional tests on non Ruby on Rails applications or your application relies heavily on JavaScript (no matter in which framework it is written)? Luckily Cucumber can be used in that case too. Since Cucumber supports Rails out of the box there is basically no need for some special configuration. On the other hand if a real browser must be used in tests, or functional testing must be done outside of the Rails environment setting up Cucumber can be little tricky but still simple enough. In this article I will focus on this scenario &ndash; <em>testing non Rails applications with <a href="http://github.com/aslakhellesoy/cucumber/wiki">Cucumber</a> and <a href="http://seleniumhq.org">Selenium</a></em>.</p>

<p>Using Selenium in Cucumber tests is done through <a href="http://github.com/brynary/webrat/wiki">Webrat</a> or <a href="http://github.com/jnicklas/capybara">Capybara</a>. First we must set up complete environment, and in the first step all necessary gems must be installed:</p>

<p><code>ruby
gem install launchy
gem install rspec
gem install cucumber
gem install webrat
gem install capybara --pre
gem install selenium-client
gem install selenium-webdriver
</code></p>

<p><em>Option —pre is used to install Capybara 0.4.0 rc</em></p>

<p><strong>Important notice for MS Windows users: Webrat depends on Json gem which installs binaries compiled against <a href="http://www.rubyinstaller.org">Rubyinstaller</a> Ruby 1.8.x version. If you are using 1.9.2 Ruby you must uninstall Json gem and install it again but with <code>--platform=ruby</code> option:</strong></p>

<p><code>ruby
gem uninstall json
gem install json --platform=ruby
</code></p>

<p>Since article focuses on the functional testing outside of Rails we should manually create folder structure that Cucumber expects.</p>

<pre><code>tests
 |- features
     |- support
     |- step_definitions
</code></pre>

<p>All <code>.feature</code> files go in the <code>features</code> folder. In the <code>support</code> folder <code>env.rb</code> file should be created and within it all set up must be made. Finally steps are implemented in Ruby files in <code>step_definitions</code> folder.</p>

<h2>Webrat</h2>

<p><a href="http://github.com/brynary/webrat/wiki">Webrat</a> controls Selenium through Selenium RC (remote control) and selenium-client gem. In order to use Selenium through Webrat put following code in your <code>env.rb</code>:</p>

<p>```ruby
require &lsquo;cucumber/formatter/unicode&rsquo;</p>

<p>require &lsquo;webrat&rsquo;
require &lsquo;webrat/core/matchers&rsquo;</p>

<p>Webrat.configure do |config|
  config.mode = :selenium
  config.application_framework = :external
  config.selenium_server_address = &lsquo;127.0.0.1&rsquo;</p>

<pre><code>if RbConfig::CONFIG['host_os'] =~ /mingw|mswin/
</code></pre>

<p>  config.selenium_browser_startup_timeout = 60
  config.application_address = &lsquo;localhost&rsquo;
  config.application_port = &lsquo;3000&rsquo;
end</p>

<p>World do
  session = Webrat::Session.new
  session.extend(Webrat::Methods)
  session.extend(Webrat::Selenium::Methods)
  session.extend(Webrat::Selenium::Matchers)
  session
end
```</p>

<p>That’s all if you are running Linux based system. On Windows a little bit more effort must be made. First of all, Webrat usess 0.0.0.0 IP address when it starts Selenium and MS Windows does not like it at all. Secondly it uses <code>/dev/null</code> stream which is not available on MS Windows. Patch is already submitted and you can follow a ticket at <a href="https://webrat.lighthouseapp.com/projects/10503/tickets/387-tiny-patch-for-work-with-selenium-on-windows#ticket-387-2">Webrat Lighthouse</a>. But until fix is accepted and new version is released, you can take a patch from <a href="http://gist.github.com/584005">Github gitst</a> and apply it to Webrat sources.</p>

<p><div><script src='https://gist.github.com/584005.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Besides this patch few more things must be done. Line:</p>

<p><code>ruby
config.selenium_server_address = '127.0.0.1' if RbConfig::CONFIG['host_os'] =~ /mingw|mswin/
</code></p>

<p>must be added to the <code>config</code> block as is already shown in the above snippet. Unfortunately selenium-client gem does not recognize <a href="http://www.rubyinstaller.org">Rubyinstaller</a> since it is built using MinGW tools. Therefore one more tiny patch must be made in the <code>selenium-client-1.2.18/lib/nautilus/shell.rb</code> file. Function <code>windows?</code> must be replaced with:</p>

<p><code>ruby
def windows?
  ::RbConfig::CONFIG['host_os'] =~ /mswin|mingw/
end
</code></p>

<p>You are ready for application testing. By default Selenium will use Firefox and if you want to use other browser (in the example Internet Explorer is set) add following line to <code>config</code> block:</p>

<p><code>ruby
config.selenium_browser_key = '*iexplore'
</code></p>

<h2>Capybara</h2>

<p>Although <a href="http://github.com/jnicklas/capybara">Capybara</a> can use Selenium RC, it primarily uses Selenium WebDriver which is still in beta phase but is working good. Since we already installed all necessary gems we can go on with configuring our testing environment. File <code>env.rb</code> should look like this:</p>

<p>```ruby
require &lsquo;rbconfig&rsquo;
require &lsquo;cucumber/formatter/unicode&rsquo;</p>

<p>require &lsquo;capybara&rsquo;
require &lsquo;capybara/dsl&rsquo;
require &ldquo;capybara/cucumber&rdquo;</p>

<p>Capybara.default_driver = :selenium
Capybara.app_host = &ldquo;<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a>&rdquo;
Capybara.register_driver :selenium do |app|
  Capybara::Driver::Selenium.new(app, :browser => :firefox)
end</p>

<p>World(Capybara)
```</p>

<p>Setting up Capybara is definitely much easier. But on MS Windows systems, if you want to use Internet Explorer, you still have to patch sources. Authors are already <a href="http://groups.google.com/group/webdriver/browse_thread/thread/a8ed4ce6f98e8322">notified about required patch</a> and I believe that new version of <code>selenium-webdriver</code> gem will be released with it. In the meantime you just have to change definition of <code>initialize</code> method in <code>selenium-webdriver-0.0.28/lib/selenium/webdriver/ie/bridge.rb</code> from:</p>

<p><code>ruby
def initialize()
</code></p>

<p>to</p>

<p><code>ruby
def initialize(opts = {})
</code></p>

<p>Changing browser is as easy as changing <code>:firefox</code> to <code>:ie</code> or <code>:chrome</code>. Instead of <code>:firefox</code> you can also use <code>:ff</code> and for Internet Explorer <code>:internet_explorer</code>. One more notice about differences if you are switching from Webrat to Capybara. Capybara will reset session after each step. If you do not want that (for example you log in to your application in the first scenario, and do not want to repeat it in each succeeding one) just add:</p>

<p><code>ruby
After do
end
</code></p>

<p>in <code>env.rb</code> file.</p>

<p>With Capybara you are not limited to Selenium WebDriver. If you want to use Selenium RC you just need to configure it in <code>env.rb</code> file:</p>

<p>```ruby
require &lsquo;rbconfig&rsquo;
require &lsquo;cucumber/formatter/unicode&rsquo;</p>

<p>require &lsquo;capybara&rsquo;
require &lsquo;capybara/dsl&rsquo;
require &ldquo;capybara/cucumber&rdquo;</p>

<p>Capybara.default_driver = :selenium
Capybara.app_host = &ldquo;<a href="http://127.0.0.1:9000/">http://127.0.0.1:9000/</a>&rdquo;
Capybara.register_driver :selenium do |app|
  # This way we are using Selenium-RC
  Capybara::Driver::Selenium.new(app,</p>

<pre><code>                             :browser =&gt; :remote,
                             :url =&gt; "http://127.0.0.1:4444/wd/hub",
                             :desired_capabilities =&gt; :internet_explorer)
</code></pre>

<p>end</p>

<p>World(Capybara)
```</p>

<h2>Conclusion</h2>

<p>Both gems for running Selenium as a base for functional tests &ndash; Webrat and Capybara are easy to use. Although Webrat needs more patching to work under Windows it has one advantage. It can be used with <a href="http://mechanize.rubyforge.org/mechanize/">Mechanize</a> if you do not need real browser and you still want to test non Rails application. But as much as it is advantage for “classic” Web application Mechanize cannot interpret JavaScript. So if you want to include JavaScript testing you either have to use real browser or switch to Capybara.</p>

<p>Capybara, on the other hand, needs significantly less patching on MS Windows systems and it cannot use Mechanize as far as I know. But, from my point of view, it is easier to use then Webrat. Currently it cannot use Mechanize, but it can use <a href="http://github.com/langalex/culerity/">Culerity</a> and <a href="http://celerity.rubyforge.org/">Celerity</a> for JavaScript testing. Moreover <a href="http://github.com/smparkes/capybara-envjs">capybara-envjs driver</a> can be used to interpret JavaScript outside of the browser.</p>

<p>Although I’m still not sure which one is better to use, I switched from Webrat to Capybara and I think that tests that use Selenium WebDriver are running faster. There is an <a href="http://groups.google.com/group/ruby-capybara/browse_thread/thread/4bcc26a9cfa20ef2">initiative for merging</a> these projects into one but I do not know if it will happen and when. I would like to hear what you think. What is your choice: Webrat or Capybara?</p>
]]></content>
  </entry>
  
</feed>
